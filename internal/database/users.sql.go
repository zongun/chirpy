// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, password)
VALUES (gen_random_uuid(), NOW(), NOW(), $1, $2)
RETURNING id, created_at, updated_at, email, password
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserAuth = `-- name: GetUserAuth :one
SELECT id, created_at, updated_at, email, password FROM users WHERE email=$1
`

func (q *Queries) GetUserAuth(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserAuth, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :execresult
DELETE FROM users
`

func (q *Queries) ResetUsers(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, resetUsers)
}
